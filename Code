#include <Arduino.h>
#include <EEPROM.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include "esp_camera.h"
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>
#include <Adafruit_Fingerprint.h>
#include <SoftwareSerial.h> 
SoftwareSerial fingerPrintSerial(4, 2);
Adafruit_Fingerprint fingerPrint = Adafruit_Fingerprint(&fingerPrintSerial);
const char* ssid = "Galaxy M31s";
const char* password = "123456787654321";

// Инициализируйте Telegram-бота
String BOTtoken = "7176709376:AAEf8fMabj1TAyCXvVs8DcznMWpa6Q8llyg";  // ваш токен бота (получите от Botfather)

// Используйте @myidbot, чтобы узнать идентификатор чата отдельного человека или группы
// Также обратите внимание, что вам нужно нажать "начать" на боте, прежде чем он сможет отправить вам сообщение.
String CHAT_ID = "660730874";

bool sendPhoto = false;
int fingerprintID = 0;

WiFiClientSecure clientTCP;
UniversalTelegramBot bot(BOTtoken, clientTCP);

#define FLASH_LED_PIN 4
bool flashState = LOW;

//Проверяет наличие новых сообщений каждые 1 секунду.
int botRequestDelay = 1000;
unsigned long lastTimeBotRan;

//CAMERA_MODEL_AI_THINKER
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27

#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

#define FINGERPRINT_EEPROM_ADDR 0 // Адрес в EEPROM для хранения отпечатка пальца


void configInitCamera(){
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.grab_mode = CAMERA_GRAB_LATEST;

  //инициализация с высокими характеристиками для предварительного выделения больших буферов
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;  //0-63 lower number means higher quality
    config.fb_count = 1;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;  //0-63 lower number means higher quality
    config.fb_count = 1;
  }
  
  // запуск камеры
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    delay(1000);
    ESP.restart();
  }
}
// Максимальный размер отпечатка пальца
#define FINGERPRINT_SIZE 100
byte fingerprint[FINGERPRINT_SIZE]; // переменная для хранения отпечатка пальца
int fingerprintSize = 0;             // размер сохраненного отпечатка пальца

void addFingerprintToMemory(byte* newFingerprint, int size) {
  if (size <= FINGERPRINT_SIZE) {
    memcpy(fingerprint, newFingerprint, size);
    fingerprintSize = size;
    Serial.println("Fingerprint added to memory.");
  } else {
    Serial.println("Fingerprint size exceeds memory capacity.");
  }
}

bool checkFingerprintInMemory(byte* scannedFingerprint, int size) {
  if (size == fingerprintSize) {
    return memcmp(scannedFingerprint, fingerprint, size) == 0;
  } else {
    return false;
  }
}

void setup() {
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); 
  Serial.begin(115200);

  pinMode(FLASH_LED_PIN, OUTPUT);
  digitalWrite(FLASH_LED_PIN, flashState);

  configInitCamera();

  WiFi.mode(WIFI_STA);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  clientTCP.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println();
  Serial.print("ESP32-CAM IP Address: ");
  Serial.println(WiFi.localIP()); 
}

void loop() {
  if (sendPhoto) {
    Serial.println("Preparing photo");
    sendPhotoTelegram(); 
    sendPhoto = false; 
  }
  if (millis() > lastTimeBotRan + botRequestDelay)  {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    while (numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastTimeBotRan = millis();
  }
}

void handleNewMessages(int numNewMessages) {
  Serial.print("Handle New Messages: ");
  Serial.println(numNewMessages);

  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = String(bot.messages[i].chat_id);
    if (chat_id != CHAT_ID){
      bot.sendMessage(chat_id, "Unauthorized user", "");
      continue;
    }
    
    String text = bot.messages[i].text;
    Serial.println(text);
    
    String from_name = bot.messages[i].from_name;
    if (text == "/start") {
      String welcome = "Welcome , " + from_name + "\n";
      welcome += "Use the following commands to interact with the ESP32-CAM \n";
      welcome += "/photo : takes a new photo\n";
      welcome += "/add : add finger \n";
      welcome += "/delete : delete finger \n";
      welcome += "/open : open seif \n";
      bot.sendMessage(CHAT_ID, welcome, "");
    }
    if (text == "/add") {
      addFingerprint(); // вызываем функцию для сканирования отпечатка пальца
    }
    if (text == "/delete") {
      deletFinger();
    }
    if (text == "/open"){
      openseif();
    }
    if (text == "/photo") {
      sendPhoto = true;
      Serial.println("New photo request");
    }
  }
}

void addFingerprint() {

  bot.sendMessage(CHAT_ID, "Place your finger on the sensor...", "");

  // Ожидание, пока палец не будет обнаружен
  if (fingerPrint.getImage()) { delay(500);
  // Ожидание, пока палец не будет распознан
    int fingerprintID = fingerPrint.fingerID;
    Serial.println(fingerprintID);
    if (fingerprintID == FINGERPRINT_NOFINGER) {
      bot.sendMessage(CHAT_ID,"No finger detected", "");
      return;
    }

  // Ожидание, пока палец не будет удален с сенсора
  if (fingerPrint.fingerID == fingerprintID) {delay(500);
  // Добавление отпечатка пальца в память сенсора
  if (fingerPrint.createModel()) {
    Serial.println("Model created");
  } else {
    Serial.println("Failed to create model");
    return;
  }

  if (fingerPrint.storeModel(fingerprintID)) {
    Serial.println("Stored!");
    bot.sendMessage(CHAT_ID,"Отпечаток добавлен", "");
  } else {
    Serial.println("Failed to store model");
    return;
  }
  }
  Serial.println(fingerprintID);
}
}

void deletFinger() {

  Serial.println("Place your finger on the sensor...");

  // Ожидание, пока палец не будет обнаружен
  if (fingerPrint.getImage()) delay(500);

  // Получение отпечатка пальца
  int fingerprintID = fingerPrint.fingerID;
  if (fingerprintID == FINGERPRINT_NOFINGER) {
    Serial.println("No finger detected");
    return;
  }

  // Ожидание, пока палец не будет удален с сенсора
  if (fingerPrint.fingerID == fingerprintID) delay(500);

  // Удаление отпечатка пальца из памяти сенсора
  if (fingerPrint.deleteModel(fingerprintID) == FINGERPRINT_OK) {
    Serial.println("Fingerprint deleted successfully");
    bot.sendMessage(CHAT_ID, "Отпечаток удален", "");
  } else {
    Serial.println("Failed to delete fingerprint");
    bot.sendMessage(CHAT_ID, "Ошибка при удалении отпечатка", "");
  }
}

void openseif(){
if (fingerPrint.getImage()) {

  // Получение отпечатка пальца
  int fingerprintID = fingerPrint.fingerID;
  if (fingerprintID == FINGERPRINT_NOFINGER) {
    return;
  }

   // Ожидание, пока палец не будет удален с сенсора
  if (fingerPrint.fingerID == fingerprintID) delay(500);

  // Проверка наличия отпечатка пальца в памяти сенсора
  if (fingerPrint.verifyPassword() == FINGERPRINT_OK) {

    // Отправка сообщения "открыто" в телеграмм бота
    bot.sendMessage(CHAT_ID, "Открыто", "");
    sendPhotoTelegram();     
  } else {
    bot.sendMessage(CHAT_ID, "Нет такого отпечатка", "");
    sendPhotoTelegram();  
  }

}
  if (millis() > lastTimeBotRan + botRequestDelay)  {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
      handleNewMessages(numNewMessages);
    while (numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastTimeBotRan = millis();
  }
}

String sendPhotoTelegram() {
  const char* myDomain = "api.telegram.org";
  String getAll = "";
  String getBody = "";

  camera_fb_t * fb = NULL;
  fb = esp_camera_fb_get();
  esp_camera_fb_return(fb);
  
  fb = NULL;  
  fb = esp_camera_fb_get();  
  if(!fb) {
    Serial.println("Camera capture failed");
    delay(1000);
    ESP.restart();
    return "Camera capture failed";
  }  
  
  Serial.println("Connect to " + String(myDomain));

  if (clientTCP.connect(myDomain, 443)) {
    Serial.println("Connection successful");
    
    String head = "--RandomNerdTutorials\r\nContent-Disposition: form-data; name=\"chat_id\"; \r\n\r\n" + CHAT_ID + "\r\n--RandomNerdTutorials\r\nContent-Disposition: form-data; name=\"photo\"; filename=\"esp32-cam.jpg\"\r\nContent-Type: image/jpeg\r\n\r\n";
    String tail = "\r\n--RandomNerdTutorials--\r\n";

    size_t imageLen = fb->len;
    size_t extraLen = head.length() + tail.length();
    size_t totalLen = imageLen + extraLen;
  
    clientTCP.println("POST /bot"+BOTtoken+"/sendPhoto HTTP/1.1");
    clientTCP.println("Host: " + String(myDomain));
    clientTCP.println("Content-Length: " + String(totalLen));
    clientTCP.println("Content-Type: multipart/form-data; boundary=RandomNerdTutorials");
    clientTCP.println();
    clientTCP.print(head);
  
    uint8_t *fbBuf = fb->buf;
    size_t fbLen = fb->len;
    for (size_t n=0;n<fbLen;n=n+1024) {
      if (n+1024<fbLen) {
        clientTCP.write(fbBuf, 1024);
        fbBuf += 1024;
      }
      else if (fbLen%1024>0) {
        size_t remainder = fbLen%1024;
        clientTCP.write(fbBuf, remainder);
      }
    }  
    
    clientTCP.print(tail);
    
    esp_camera_fb_return(fb);
    
    int waitTime = 10000;   // тайм-аут 10 секунд
    long startTimer = millis();
    boolean state = false;
    
    while ((startTimer + waitTime) > millis()){
      Serial.print(".");
      delay(100);      
      while (clientTCP.available()) {
        char c = clientTCP.read();
        if (state==true) getBody += String(c);        
        if (c == '\n') {
          if (getAll.length()==0) state=true; 
          getAll = "";
        } 
        else if (c != '\r')
          getAll += String(c);
        startTimer = millis();
      }
      if (getBody.length()>0) break;
    }
    clientTCP.stop();
    Serial.println(getBody);
  }
  else {
    getBody="Connected to api.telegram.org failed.";
    Serial.println("Connected to api.telegram.org failed.");
  }
  return getBody;
}


